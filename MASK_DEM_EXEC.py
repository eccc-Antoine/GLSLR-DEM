import os
import shapely
from shapely.validation import make_valid
from shapely.geometry import Polygon, MultiPolygon
import numpy as np
import geopandas as gpd
import fiona
import rasterio

''' 
Script to apply no data mask on final DEM
In this script the mask is actually based in tile datasets extent wich is clipped with no data mask in dataset_extent_modif.py
No data mask were generated by semi automated routine and would benificiate from better attention/revision

Author: Antoine Maranda (antoine.maranda@ec.gc.ca)
Environment and Climate Change Canada, National Hydrologic Services, Hydrodynamic and Ecohydraulic Section

'''

def clipping_raster(extent_file, reproj, dst):
    with fiona.open(extent_file, "r") as shapefile:
        shapes = [feature["geometry"] for feature in shapefile]

    with rasterio.open(reproj) as src:
        out_image, out_transform = rasterio.mask.mask(src, shapes, crop=True, all_touched=True, pad=True)
        out_meta = src.meta
        out_meta.update({"driver": "GTiff",
                         "height": out_image.shape[1],
                         "width": out_image.shape[2],
                         "transform": out_transform, "nodata": 0}
                        )
    with rasterio.open(dst, "w", **out_meta) as dest:
        dest.write(out_image)


def clean_gdf(gdf):
    extent=gdf.explode(ignore_index=True, index_parts=True)
    extent.reset_index(drop=True)    
    list_2_drop=[]    
    for f in range(len(extent)):
        extent.geometry.iloc[f] = make_valid(extent.geometry.iloc[f])
        if str(extent.geometry.iloc[f]).split(' ')[0]!='POLYGON' and str(extent.geometry.iloc[f]).split(' ')[0]!='MULTIPOLYGON':
            list_2_drop.append(f)            
    extent=extent.drop(labels=list_2_drop, axis=0)
    return extent


def execute(tiles, cfg, res_folder, dump_folder, final_res):

    for t in tiles:
        DEMS=[fr"{res_folder}\{t}_{final_res}m_DEM_idw_filtered.tif", fr"{res_folder}\{t}_{cfg.resamp_res}m_DEM_idw_filtered.tif", fr"{res_folder}\{t}_{final_res}m_dem_wetland_corrected.tif", fr"{res_folder}\{t}_{cfg.resamp_res}m_dem_wetland_corrected.tif" ]
        
        clipper=fr"{res_folder}\datasets_extent_{t}_details.shp"
        
        gdf=gpd.read_file(clipper)
        
        gdf_clean=clean_gdf(gdf)
        
        gdf_clean=gdf_clean.dissolve()

        gdf_clean['geometry']=gdf_clean['geometry'].buffer(1)
        
        clipper_clean=fr'{dump_folder}\{t}_no_data_clean.shp'
        
        gdf_clean.to_file(clipper_clean)

        for D in DEMS:
            
            dst=D.replace('.tif', '_masked.tif')
            if os.path.exists(D):

                if not os.path.exists(dst):
                    clipping_raster(clipper_clean, D, dst)
                
                else:
                    os.remove(dst)
                    clipping_raster(clipper_clean, D, dst)
            
            else:
                print(fr'{D}, dont exists...')
